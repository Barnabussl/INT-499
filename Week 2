import React, { useState } from 'react';
import { Home, Film, ShoppingCart, Info, Edit3, Trash2, Check, X, Plus, Search, Filter, Star, Clock, TrendingUp, User, Settings, Bell } from 'lucide-react';

const BrowserRouter = ({ children }) => {
  const [currentPath, setCurrentPath] = useState(window.location.pathname || '/');
  
  const navigate = (path) => {
    setCurrentPath(path);
  };
  
  return (
    <RouterContext.Provider value={{ currentPath, navigate }}>
      {children}
    </RouterContext.Provider>
  );
};

const Routes = ({ children }) => {
  const { currentPath } = React.useContext(RouterContext);
  
  const matchingRoute = React.Children.toArray(children).find(child => {
    return child.props.path === currentPath;
  });
  
  return matchingRoute || null;
};

const Route = ({ path, element }) => {
  return element;
};

const Link = ({ to, children, className }) => {
  const { navigate } = React.useContext(RouterContext);
  
  return (
    <button 
      onClick={() => navigate(to)}
      className={className}
    >
      {children}
    </button>
  );
};

const useLocation = () => {
  const { currentPath } = React.useContext(RouterContext);
  return { pathname: currentPath };
};

const RouterContext = React.createContext();

// Enhanced StreamList Component
const StreamList = () => {
  const [userInput, setUserInput] = useState('');
  const [submittedInputs, setSubmittedInputs] = useState([]);
  const [editingId, setEditingId] = useState(null);
  const [editingText, setEditingText] = useState('');
  const [filter, setFilter] = useState('all'); // all, active, completed
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);

  const handleInputChange = (e) => {
    setUserInput(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (userInput.trim()) {
      const newItem = {
        id: Date.now(),
        text: userInput.trim(),
        completed: false,
        createdAt: new Date().toLocaleDateString(),
        priority: 'medium'
      };
      setSubmittedInputs(prev => [...prev, newItem]);
      setUserInput('');
      setShowAddForm(false);
    }
  };

  const handleEdit = (id, text) => {
    setEditingId(id);
    setEditingText(text);
  };

  const handleSaveEdit = (id) => {
    if (editingText.trim()) {
      setSubmittedInputs(prev => 
        prev.map(item => 
          item.id === id ? { ...item, text: editingText.trim() } : item
        )
      );
    }
    setEditingId(null);
    setEditingText('');
  };

  const handleCancelEdit = () => {
    setEditingId(null);
    setEditingText('');
  };

  const handleDelete = (id) => {
    setSubmittedInputs(prev => prev.filter(item => item.id !== id));
  };

  const handleToggleComplete = (id) => {
    setSubmittedInputs(prev => 
      prev.map(item => 
        item.id === id ? { ...item, completed: !item.completed } : item
      )
    );
  };

  const handlePriorityChange = (id, priority) => {
    setSubmittedInputs(prev => 
      prev.map(item => 
        item.id === id ? { ...item, priority } : item
      )
    );
  };

  const filteredInputs = submittedInputs.filter(item => {
    const matchesFilter = filter === 'all' || 
      (filter === 'active' && !item.completed) || 
      (filter === 'completed' && item.completed);
    const matchesSearch = item.text.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  const stats = {
    total: submittedInputs.length,
    completed: submittedInputs.filter(item => item.completed).length,
    active: submittedInputs.filter(item => !item.completed).length
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'border-red-500 bg-red-50';
      case 'medium': return 'border-yellow-500 bg-yellow-50';
      case 'low': return 'border-green-500 bg-green-50';
      default: return 'border-gray-500 bg-gray-50';
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <div className="mb-8">
        <h1 className="text-4xl font-bold text-gray-800 mb-2">My Stream List</h1>
        <p className="text-gray-600">Organize your favorite content and track your progress</p>
      </div>

      {/* Stats Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Items</p>
              <p className="text-3xl font-bold text-gray-800">{stats.total}</p>
            </div>
            <div className="bg-blue-100 p-3 rounded-full">
              <Film className="h-6 w-6 text-blue-600" />
            </div>
          </div>
        </div>
        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Completed</p>
              <p className="text-3xl font-bold text-gray-800">{stats.completed}</p>
            </div>
            <div className="bg-green-100 p-3 rounded-full">
              <Check className="h-6 w-6 text-green-600" />
            </div>
          </div>
        </div>
        <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-orange-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Active</p>
              <p className="text-3xl font-bold text-gray-800">{stats.active}</p>
            </div>
            <div className="bg-orange-100 p-3 rounded-full">
              <Clock className="h-6 w-6 text-orange-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Controls */}
      <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
        <div className="flex flex-col lg:flex-row gap-4 items-center justify-between">
          <div className="flex flex-col sm:flex-row gap-4 flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search your list..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Items</option>
              <option value="active">Active</option>
              <option value="completed">Completed</option>
            </select>
          </div>
          <button
            onClick={() => setShowAddForm(!showAddForm)}
            className="flex items-center gap-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
          >
            <Plus className="h-4 w-4" />
            Add New Item
          </button>
        </div>

        {/* Add Form */}
        {showAddForm && (
          <div className="mt-6 p-4 bg-gray-50 rounded-lg border">
            <form onSubmit={handleSubmit}>
              <div className="flex flex-col sm:flex-row gap-4">
                <input
                  type="text"
                  value={userInput}
                  onChange={handleInputChange}
                  placeholder="Enter your stream or content..."
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  autoFocus
                />
                <div className="flex gap-2">
                  <button
                    type="submit"
                    className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
                  >
                    Add
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowAddForm(false)}
                    className="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors duration-200 font-medium"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </form>
          </div>
        )}
      </div>

      {/* Items List */}
      {filteredInputs.length > 0 ? (
        <div className="space-y-4">
          {filteredInputs.map((item) => (
            <div
              key={item.id}
              className={`bg-white rounded-xl shadow-lg p-6 border-l-4 transition-all duration-200 hover:shadow-xl ${
                item.completed ? 'opacity-75' : ''
              } ${getPriorityColor(item.priority)}`}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4 flex-1">
                  <button
                    onClick={() => handleToggleComplete(item.id)}
                    className={`w-6 h-6 rounded-full border-2 flex items-center justify-center transition-colors duration-200 ${
                      item.completed
                        ? 'bg-green-500 border-green-500 text-white'
                        : 'border-gray-300 hover:border-green-500'
                    }`}
                  >
                    {item.completed && <Check className="h-4 w-4" />}
                  </button>
                  
                  <div className="flex-1">
                    {editingId === item.id ? (
                      <div className="flex gap-2">
                        <input
                          type="text"
                          value={editingText}
                          onChange={(e) => setEditingText(e.target.value)}
                          className="flex-1 px-3 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                          onKeyPress={(e) => e.key === 'Enter' && handleSaveEdit(item.id)}
                          autoFocus
                        />
                        <button
                          onClick={() => handleSaveEdit(item.id)}
                          className="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 transition-colors duration-200"
                        >
                          <Check className="h-4 w-4" />
                        </button>
                        <button
                          onClick={handleCancelEdit}
                          className="px-3 py-1 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors duration-200"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ) : (
                      <div>
                        <p className={`text-lg font-medium ${item.completed ? 'line-through text-gray-500' : 'text-gray-800'}`}>
                          {item.text}
                        </p>
                        <p className="text-sm text-gray-500 mt-1">Added on {item.createdAt}</p>
                      </div>
                    )}
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <select
                    value={item.priority}
                    onChange={(e) => handlePriorityChange(item.id, e.target.value)}
                    className="text-sm px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                  >
                    <option value="low">Low</option>
                    <option value="medium">Medium</option>
                    <option value="high">High</option>
                  </select>
                  
                  <button
                    onClick={() => handleEdit(item.id, item.text)}
                    className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                  >
                    <Edit3 className="h-4 w-4" />
                  </button>
                  
                  <button
                    onClick={() => handleDelete(item.id)}
                    className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors duration-200"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-lg p-12 text-center">
          <Film className="mx-auto h-16 w-16 text-gray-400 mb-4" />
          <h2 className="text-2xl font-semibold text-gray-600 mb-2">
            {searchTerm || filter !== 'all' ? 'No items found' : 'Your list is empty'}
          </h2>
          <p className="text-gray-500 mb-6">
            {searchTerm || filter !== 'all' 
              ? 'Try adjusting your search or filter criteria' 
              : 'Start building your stream list by adding your first item!'
            }
          </p>
          {!showAddForm && !searchTerm && filter === 'all' && (
            <button
              onClick={() => setShowAddForm(true)}
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
            >
              Add Your First Item
            </button>
          )}
        </div>
      )}
    </div>
  );
};

// Enhanced Movies Component
const Movies = () => {
  const [movies] = useState([
    { id: 1, title: "The Matrix", genre: "Sci-Fi", rating: 8.7, year: 1999 },
    { id: 2, title: "Inception", genre: "Sci-Fi", rating: 8.8, year: 2010 },
    { id: 3, title: "Interstellar", genre: "Sci-Fi", rating: 8.6, year: 2014 },
  ]);

  return (
    <div className="max-w-6xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">Popular Movies</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {movies.map(movie => (
          <div key={movie.id} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-200">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-semibold text-gray-800">{movie.title}</h3>
              <div className="flex items-center gap-1">
                <Star className="h-4 w-4 text-yellow-500 fill-current" />
                <span className="text-sm font-medium text-gray-600">{movie.rating}</span>
              </div>
            </div>
            <p className="text-gray-600 mb-2">{movie.genre} • {movie.year}</p>
            <button className="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
              Add to Watchlist
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

// Enhanced Cart Component
const Cart = () => {
  const [cartItems] = useState([
    { id: 1, name: "Netflix Subscription", price: 15.99, type: "monthly" },
    { id: 2, name: "Disney+ Subscription", price: 7.99, type: "monthly" },
  ]);

  const total = cartItems.reduce((sum, item) => sum + item.price, 0);

  return (
    <div className="max-w-4xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">Shopping Cart</h1>
      <div className="bg-white rounded-xl shadow-lg p-6">
        {cartItems.length > 0 ? (
          <>
            <div className="space-y-4 mb-6">
              {cartItems.map(item => (
                <div key={item.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                  <div>
                    <h3 className="font-semibold text-gray-800">{item.name}</h3>
                    <p className="text-sm text-gray-600 capitalize">{item.type}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-semibold text-gray-800">${item.price}</p>
                  </div>
                </div>
              ))}
            </div>
            <div className="border-t pt-4">
              <div className="flex justify-between items-center mb-4">
                <span className="text-lg font-semibold">Total:</span>
                <span className="text-2xl font-bold text-blue-600">${total.toFixed(2)}</span>
              </div>
              <button className="w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium">
                Proceed to Checkout
              </button>
            </div>
          </>
        ) : (
          <div className="text-center py-8">
            <ShoppingCart className="mx-auto h-16 w-16 text-gray-400 mb-4" />
            <p className="text-gray-600">Your cart is empty</p>
          </div>
        )}
      </div>
    </div>
  );
};

// Enhanced About Component
const About = () => {
  return (
    <div className="max-w-4xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">About StreamList</h1>
      <div className="bg-white rounded-xl shadow-lg p-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Our Mission</h2>
            <p className="text-gray-600 mb-6">
              StreamList helps you organize and track your favorite streaming content. 
              Never lose track of what you want to watch next!
            </p>
            <div className="space-y-4">
              <div className="flex items-center gap-3">
                <Check className="h-5 w-5 text-green-500" />
                <span className="text-gray-700">Easy content organization</span>
              </div>
              <div className="flex items-center gap-3">
                <Check className="h-5 w-5 text-green-500" />
                <span className="text-gray-700">Progress tracking</span>
              </div>
              <div className="flex items-center gap-3">
                <Check className="h-5 w-5 text-green-500" />
                <span className="text-gray-700">Priority management</span>
              </div>
            </div>
          </div>
          <div>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Features</h2>
            <div className="space-y-3">
              <div className="p-3 bg-blue-50 rounded-lg">
                <h3 className="font-medium text-blue-900">Smart Organization</h3>
                <p className="text-sm text-blue-700">Categorize and prioritize your content</p>
              </div>
              <div className="p-3 bg-green-50 rounded-lg">
                <h3 className="font-medium text-green-900">Progress Tracking</h3>
                <p className="text-sm text-green-700">Mark items as complete and track your progress</p>
              </div>
              <div className="p-3 bg-purple-50 rounded-lg">
                <h3 className="font-medium text-purple-900">Search & Filter</h3>
                <p className="text-sm text-purple-700">Quickly find what you're looking for</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Trending Component
const Trending = () => {
  return (
    <div className="max-w-6xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">Trending Now</h1>
      <div className="bg-white rounded-xl shadow-lg p-8 text-center">
        <TrendingUp className="mx-auto h-16 w-16 text-gray-400 mb-4" />
        <h2 className="text-2xl font-semibold text-gray-600 mb-2">Trending Content</h2>
        <p className="text-gray-500">Discover what's popular in streaming right now</p>
      </div>
    </div>
  );
};

// Profile Component
const Profile = () => {
  return (
    <div className="max-w-4xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">My Profile</h1>
      <div className="bg-white rounded-xl shadow-lg p-8 text-center">
        <User className="mx-auto h-16 w-16 text-gray-400 mb-4" />
        <h2 className="text-2xl font-semibold text-gray-600 mb-2">User Profile</h2>
        <p className="text-gray-500">Manage your account settings and preferences</p>
      </div>
    </div>
  );
};

// Settings Component
const AppSettings = () => {
  return (
    <div className="max-w-4xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">Settings</h1>
      <div className="bg-white rounded-xl shadow-lg p-8 text-center">
        <Settings className="mx-auto h-16 w-16 text-gray-400 mb-4" />
        <h2 className="text-2xl font-semibold text-gray-600 mb-2">App Settings</h2>
        <p className="text-gray-500">Customize your StreamList experience</p>
      </div>
    </div>
  );
};

// Notifications Component
const Notifications = () => {
  return (
    <div className="max-w-4xl mx-auto p-6" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <h1 className="text-4xl font-bold text-gray-800 mb-8">Notifications</h1>
      <div className="bg-white rounded-xl shadow-lg p-8 text-center">
        <Bell className="mx-auto h-16 w-16 text-gray-400 mb-4" />
        <h2 className="text-2xl font-semibold text-gray-600 mb-2">Notifications</h2>
        <p className="text-gray-500">Stay updated with your streaming activity</p>
      </div>
    </div>
  );
};

// Enhanced Navigation Component
const Navigation = () => {
  const location = useLocation();
  
  const navItems = [
    { path: '/', label: 'Home', icon: Home },
    { path: '/movies', label: 'Movies', icon: Film },
    { path: '/trending', label: 'Trending', icon: TrendingUp },
    { path: '/cart', label: 'Cart', icon: ShoppingCart },
    { path: '/profile', label: 'Profile', icon: User },
    { path: '/notifications', label: 'Notifications', icon: Bell },
    { path: '/settings', label: 'Settings', icon: Settings },
    { path: '/about', label: 'About', icon: Info }
  ];

  return (
    <nav className="bg-white shadow-lg sticky top-0 z-50" style={{ fontFamily: 'Inter, system-ui, sans-serif' }}>
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          <div className="flex items-center space-x-3">
            <div className="bg-blue-600 p-2 rounded-lg">
              <Film className="h-8 w-8 text-white" />
            </div>
            <div>
              <span className="text-2xl font-bold text-gray-800">StreamList</span>
              <p className="text-sm text-gray-600">Your Content Hub</p>
            </div>
          </div>
          
          <div className="hidden lg:flex space-x-1">
            {navItems.map(({ path, label, icon: Icon }) => (
              <Link
                key={path}
                to={path}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all duration-200 ${
                  location.pathname === path
                    ? 'bg-blue-600 text-white shadow-lg'
                    : 'text-gray-600 hover:bg-gray-100 hover:text-gray-800'
                }`}
              >
                <Icon className="h-4 w-4" />
                <span className="font-medium">{label}</span>
              </Link>
            ))}
          </div>

          {/* Mobile menu button */}
          <div className="lg:hidden">
            <button className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg">
              <Settings className="h-6 w-6" />
            </button>
          </div>
        </div>
        
        {/* Mobile Navigation */}
        <div className="lg:hidden pb-4">
          <div className="grid grid-cols-4 gap-2">
            {navItems.slice(0, 8).map(({ path, label, icon: Icon }) => (
              <Link
                key={path}
                to={path}
                className={`flex flex-col items-center space-y-1 p-2 rounded-lg transition-all duration-200 ${
                  location.pathname === path
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 hover:bg-gray-100'
                }`}
              >
                <Icon className="h-4 w-4" />
                <span className="text-xs font-medium">{label}</span>
              </Link>
            ))}
          </div>
        </div>
      </div>
    </nav>
  );
};

// Main App Component
const App = () => {
  return (
    <BrowserRouter>
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50">
        <Navigation />
        <main>
          <Routes>
            <Route path="/" element={<StreamList />} />
            <Route path="/movies" element={<Movies />} />
            <Route path="/trending" element={<Trending />} />
            <Route path="/cart" element={<Cart />} />
            <Route path="/profile" element={<Profile />} />
            <Route path="/notifications" element={<Notifications />} />
            <Route path="/settings" element={<AppSettings />} />
            <Route path="/about" element={<About />} />
          </Routes>
        </main>
      </div>
    </BrowserRouter>
  );
};

export default App;
